//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RegistrationWeb.Client.RegistrationServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RegistrationServiceReference.IRegistrationService")]
    public interface IRegistrationService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/RegisterForCourse", ReplyAction="http://tempuri.org/IRegistrationService/RegisterForCourseResponse")]
        bool RegisterForCourse(int studentId, int courseScheduleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/RegisterForCourse", ReplyAction="http://tempuri.org/IRegistrationService/RegisterForCourseResponse")]
        System.Threading.Tasks.Task<bool> RegisterForCourseAsync(int studentId, int courseScheduleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/HoldCourse", ReplyAction="http://tempuri.org/IRegistrationService/HoldCourseResponse")]
        bool HoldCourse(int studentId, int courseScheduleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/HoldCourse", ReplyAction="http://tempuri.org/IRegistrationService/HoldCourseResponse")]
        System.Threading.Tasks.Task<bool> HoldCourseAsync(int studentId, int courseScheduleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/DropCourse", ReplyAction="http://tempuri.org/IRegistrationService/DropCourseResponse")]
        bool DropCourse(int studentId, int studentScheduleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/DropCourse", ReplyAction="http://tempuri.org/IRegistrationService/DropCourseResponse")]
        System.Threading.Tasks.Task<bool> DropCourseAsync(int studentId, int studentScheduleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/ListStudentSchedule", ReplyAction="http://tempuri.org/IRegistrationService/ListStudentScheduleResponse")]
        RegistrationWeb.Domain.RegistrationServiceReference.StudentScheduleDAO[] ListStudentSchedule(int studentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/ListStudentSchedule", ReplyAction="http://tempuri.org/IRegistrationService/ListStudentScheduleResponse")]
        System.Threading.Tasks.Task<RegistrationWeb.Domain.RegistrationServiceReference.StudentScheduleDAO[]> ListStudentScheduleAsync(int studentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/ListStudentBookmarks", ReplyAction="http://tempuri.org/IRegistrationService/ListStudentBookmarksResponse")]
        RegistrationWeb.Domain.RegistrationServiceReference.StudentScheduleDAO[] ListStudentBookmarks(int studentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/ListStudentBookmarks", ReplyAction="http://tempuri.org/IRegistrationService/ListStudentBookmarksResponse")]
        System.Threading.Tasks.Task<RegistrationWeb.Domain.RegistrationServiceReference.StudentScheduleDAO[]> ListStudentBookmarksAsync(int studentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/ListStudents", ReplyAction="http://tempuri.org/IRegistrationService/ListStudentsResponse")]
        RegistrationWeb.Domain.RegistrationServiceReference.StudentDAO[] ListStudents();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/ListStudents", ReplyAction="http://tempuri.org/IRegistrationService/ListStudentsResponse")]
        System.Threading.Tasks.Task<RegistrationWeb.Domain.RegistrationServiceReference.StudentDAO[]> ListStudentsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/ListCourses", ReplyAction="http://tempuri.org/IRegistrationService/ListCoursesResponse")]
        RegistrationWeb.Domain.RegistrationServiceReference.CourseScheduleDAO[] ListCourses();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/ListCourses", ReplyAction="http://tempuri.org/IRegistrationService/ListCoursesResponse")]
        System.Threading.Tasks.Task<RegistrationWeb.Domain.RegistrationServiceReference.CourseScheduleDAO[]> ListCoursesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/GetStudent", ReplyAction="http://tempuri.org/IRegistrationService/GetStudentResponse")]
        RegistrationWeb.Domain.RegistrationServiceReference.StudentDAO GetStudent(int studentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/GetStudent", ReplyAction="http://tempuri.org/IRegistrationService/GetStudentResponse")]
        System.Threading.Tasks.Task<RegistrationWeb.Domain.RegistrationServiceReference.StudentDAO> GetStudentAsync(int studentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/ListCourseInformation", ReplyAction="http://tempuri.org/IRegistrationService/ListCourseInformationResponse")]
        RegistrationWeb.Domain.RegistrationServiceReference.CourseDAO[] ListCourseInformation();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/ListCourseInformation", ReplyAction="http://tempuri.org/IRegistrationService/ListCourseInformationResponse")]
        System.Threading.Tasks.Task<RegistrationWeb.Domain.RegistrationServiceReference.CourseDAO[]> ListCourseInformationAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/ScheduleCourse", ReplyAction="http://tempuri.org/IRegistrationService/ScheduleCourseResponse")]
        bool ScheduleCourse(int courseId, int professorId, int scheduleId, short capacity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/ScheduleCourse", ReplyAction="http://tempuri.org/IRegistrationService/ScheduleCourseResponse")]
        System.Threading.Tasks.Task<bool> ScheduleCourseAsync(int courseId, int professorId, int scheduleId, short capacity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/CancelCourse", ReplyAction="http://tempuri.org/IRegistrationService/CancelCourseResponse")]
        bool CancelCourse(int courseScheduleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/CancelCourse", ReplyAction="http://tempuri.org/IRegistrationService/CancelCourseResponse")]
        System.Threading.Tasks.Task<bool> CancelCourseAsync(int courseScheduleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/ModifyCourse", ReplyAction="http://tempuri.org/IRegistrationService/ModifyCourseResponse")]
        bool ModifyCourse(int courseScheduleId, int scheduleId, short capacity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/ModifyCourse", ReplyAction="http://tempuri.org/IRegistrationService/ModifyCourseResponse")]
        System.Threading.Tasks.Task<bool> ModifyCourseAsync(int courseScheduleId, int scheduleId, short capacity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/ListEnrolledStudents", ReplyAction="http://tempuri.org/IRegistrationService/ListEnrolledStudentsResponse")]
        RegistrationWeb.Domain.RegistrationServiceReference.StudentDAO[] ListEnrolledStudents(int courseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/ListEnrolledStudents", ReplyAction="http://tempuri.org/IRegistrationService/ListEnrolledStudentsResponse")]
        System.Threading.Tasks.Task<RegistrationWeb.Domain.RegistrationServiceReference.StudentDAO[]> ListEnrolledStudentsAsync(int courseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/ListSchedules", ReplyAction="http://tempuri.org/IRegistrationService/ListSchedulesResponse")]
        RegistrationWeb.Domain.RegistrationServiceReference.ScheduleDAO[] ListSchedules();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/ListSchedules", ReplyAction="http://tempuri.org/IRegistrationService/ListSchedulesResponse")]
        System.Threading.Tasks.Task<RegistrationWeb.Domain.RegistrationServiceReference.ScheduleDAO[]> ListSchedulesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/ListPeople", ReplyAction="http://tempuri.org/IRegistrationService/ListPeopleResponse")]
        RegistrationWeb.Domain.RegistrationServiceReference.PersonDAO[] ListPeople();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/ListPeople", ReplyAction="http://tempuri.org/IRegistrationService/ListPeopleResponse")]
        System.Threading.Tasks.Task<RegistrationWeb.Domain.RegistrationServiceReference.PersonDAO[]> ListPeopleAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/ListOpenCourses", ReplyAction="http://tempuri.org/IRegistrationService/ListOpenCoursesResponse")]
        RegistrationWeb.Domain.RegistrationServiceReference.CourseScheduleDAO[] ListOpenCourses();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/ListOpenCourses", ReplyAction="http://tempuri.org/IRegistrationService/ListOpenCoursesResponse")]
        System.Threading.Tasks.Task<RegistrationWeb.Domain.RegistrationServiceReference.CourseScheduleDAO[]> ListOpenCoursesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/ListFullCourses", ReplyAction="http://tempuri.org/IRegistrationService/ListFullCoursesResponse")]
        RegistrationWeb.Domain.RegistrationServiceReference.CourseScheduleDAO[] ListFullCourses();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/ListFullCourses", ReplyAction="http://tempuri.org/IRegistrationService/ListFullCoursesResponse")]
        System.Threading.Tasks.Task<RegistrationWeb.Domain.RegistrationServiceReference.CourseScheduleDAO[]> ListFullCoursesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/AddStudent", ReplyAction="http://tempuri.org/IRegistrationService/AddStudentResponse")]
        bool AddStudent(string name, int majorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/AddStudent", ReplyAction="http://tempuri.org/IRegistrationService/AddStudentResponse")]
        System.Threading.Tasks.Task<bool> AddStudentAsync(string name, int majorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/RemoveStudent", ReplyAction="http://tempuri.org/IRegistrationService/RemoveStudentResponse")]
        bool RemoveStudent(int studentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/RemoveStudent", ReplyAction="http://tempuri.org/IRegistrationService/RemoveStudentResponse")]
        System.Threading.Tasks.Task<bool> RemoveStudentAsync(int studentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/ListCourseSchedule", ReplyAction="http://tempuri.org/IRegistrationService/ListCourseScheduleResponse")]
        RegistrationWeb.Domain.RegistrationServiceReference.CourseScheduleDAO[] ListCourseSchedule(int courseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/ListCourseSchedule", ReplyAction="http://tempuri.org/IRegistrationService/ListCourseScheduleResponse")]
        System.Threading.Tasks.Task<RegistrationWeb.Domain.RegistrationServiceReference.CourseScheduleDAO[]> ListCourseScheduleAsync(int courseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/GetCourseSchedule", ReplyAction="http://tempuri.org/IRegistrationService/GetCourseScheduleResponse")]
        RegistrationWeb.Domain.RegistrationServiceReference.CourseScheduleDAO GetCourseSchedule(int courseScheduleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/GetCourseSchedule", ReplyAction="http://tempuri.org/IRegistrationService/GetCourseScheduleResponse")]
        System.Threading.Tasks.Task<RegistrationWeb.Domain.RegistrationServiceReference.CourseScheduleDAO> GetCourseScheduleAsync(int courseScheduleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/GetSchedule", ReplyAction="http://tempuri.org/IRegistrationService/GetScheduleResponse")]
        RegistrationWeb.Domain.RegistrationServiceReference.ScheduleDAO GetSchedule(int scheduleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/GetSchedule", ReplyAction="http://tempuri.org/IRegistrationService/GetScheduleResponse")]
        System.Threading.Tasks.Task<RegistrationWeb.Domain.RegistrationServiceReference.ScheduleDAO> GetScheduleAsync(int scheduleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/ListDepartments", ReplyAction="http://tempuri.org/IRegistrationService/ListDepartmentsResponse")]
        RegistrationWeb.Domain.RegistrationServiceReference.DepartmentDAO[] ListDepartments();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/ListDepartments", ReplyAction="http://tempuri.org/IRegistrationService/ListDepartmentsResponse")]
        System.Threading.Tasks.Task<RegistrationWeb.Domain.RegistrationServiceReference.DepartmentDAO[]> ListDepartmentsAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRegistrationServiceChannel : RegistrationWeb.Client.RegistrationServiceReference.IRegistrationService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RegistrationServiceClient : System.ServiceModel.ClientBase<RegistrationWeb.Client.RegistrationServiceReference.IRegistrationService>, RegistrationWeb.Client.RegistrationServiceReference.IRegistrationService {
        
        public RegistrationServiceClient() {
        }
        
        public RegistrationServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RegistrationServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RegistrationServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RegistrationServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool RegisterForCourse(int studentId, int courseScheduleId) {
            return base.Channel.RegisterForCourse(studentId, courseScheduleId);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterForCourseAsync(int studentId, int courseScheduleId) {
            return base.Channel.RegisterForCourseAsync(studentId, courseScheduleId);
        }
        
        public bool HoldCourse(int studentId, int courseScheduleId) {
            return base.Channel.HoldCourse(studentId, courseScheduleId);
        }
        
        public System.Threading.Tasks.Task<bool> HoldCourseAsync(int studentId, int courseScheduleId) {
            return base.Channel.HoldCourseAsync(studentId, courseScheduleId);
        }
        
        public bool DropCourse(int studentId, int studentScheduleId) {
            return base.Channel.DropCourse(studentId, studentScheduleId);
        }
        
        public System.Threading.Tasks.Task<bool> DropCourseAsync(int studentId, int studentScheduleId) {
            return base.Channel.DropCourseAsync(studentId, studentScheduleId);
        }
        
        public RegistrationWeb.Domain.RegistrationServiceReference.StudentScheduleDAO[] ListStudentSchedule(int studentId) {
            return base.Channel.ListStudentSchedule(studentId);
        }
        
        public System.Threading.Tasks.Task<RegistrationWeb.Domain.RegistrationServiceReference.StudentScheduleDAO[]> ListStudentScheduleAsync(int studentId) {
            return base.Channel.ListStudentScheduleAsync(studentId);
        }
        
        public RegistrationWeb.Domain.RegistrationServiceReference.StudentScheduleDAO[] ListStudentBookmarks(int studentId) {
            return base.Channel.ListStudentBookmarks(studentId);
        }
        
        public System.Threading.Tasks.Task<RegistrationWeb.Domain.RegistrationServiceReference.StudentScheduleDAO[]> ListStudentBookmarksAsync(int studentId) {
            return base.Channel.ListStudentBookmarksAsync(studentId);
        }
        
        public RegistrationWeb.Domain.RegistrationServiceReference.StudentDAO[] ListStudents() {
            return base.Channel.ListStudents();
        }
        
        public System.Threading.Tasks.Task<RegistrationWeb.Domain.RegistrationServiceReference.StudentDAO[]> ListStudentsAsync() {
            return base.Channel.ListStudentsAsync();
        }
        
        public RegistrationWeb.Domain.RegistrationServiceReference.CourseScheduleDAO[] ListCourses() {
            return base.Channel.ListCourses();
        }
        
        public System.Threading.Tasks.Task<RegistrationWeb.Domain.RegistrationServiceReference.CourseScheduleDAO[]> ListCoursesAsync() {
            return base.Channel.ListCoursesAsync();
        }
        
        public RegistrationWeb.Domain.RegistrationServiceReference.StudentDAO GetStudent(int studentId) {
            return base.Channel.GetStudent(studentId);
        }
        
        public System.Threading.Tasks.Task<RegistrationWeb.Domain.RegistrationServiceReference.StudentDAO> GetStudentAsync(int studentId) {
            return base.Channel.GetStudentAsync(studentId);
        }
        
        public RegistrationWeb.Domain.RegistrationServiceReference.CourseDAO[] ListCourseInformation() {
            return base.Channel.ListCourseInformation();
        }
        
        public System.Threading.Tasks.Task<RegistrationWeb.Domain.RegistrationServiceReference.CourseDAO[]> ListCourseInformationAsync() {
            return base.Channel.ListCourseInformationAsync();
        }
        
        public bool ScheduleCourse(int courseId, int professorId, int scheduleId, short capacity) {
            return base.Channel.ScheduleCourse(courseId, professorId, scheduleId, capacity);
        }
        
        public System.Threading.Tasks.Task<bool> ScheduleCourseAsync(int courseId, int professorId, int scheduleId, short capacity) {
            return base.Channel.ScheduleCourseAsync(courseId, professorId, scheduleId, capacity);
        }
        
        public bool CancelCourse(int courseScheduleId) {
            return base.Channel.CancelCourse(courseScheduleId);
        }
        
        public System.Threading.Tasks.Task<bool> CancelCourseAsync(int courseScheduleId) {
            return base.Channel.CancelCourseAsync(courseScheduleId);
        }
        
        public bool ModifyCourse(int courseScheduleId, int scheduleId, short capacity) {
            return base.Channel.ModifyCourse(courseScheduleId, scheduleId, capacity);
        }
        
        public System.Threading.Tasks.Task<bool> ModifyCourseAsync(int courseScheduleId, int scheduleId, short capacity) {
            return base.Channel.ModifyCourseAsync(courseScheduleId, scheduleId, capacity);
        }
        
        public RegistrationWeb.Domain.RegistrationServiceReference.StudentDAO[] ListEnrolledStudents(int courseId) {
            return base.Channel.ListEnrolledStudents(courseId);
        }
        
        public System.Threading.Tasks.Task<RegistrationWeb.Domain.RegistrationServiceReference.StudentDAO[]> ListEnrolledStudentsAsync(int courseId) {
            return base.Channel.ListEnrolledStudentsAsync(courseId);
        }
        
        public RegistrationWeb.Domain.RegistrationServiceReference.ScheduleDAO[] ListSchedules() {
            return base.Channel.ListSchedules();
        }
        
        public System.Threading.Tasks.Task<RegistrationWeb.Domain.RegistrationServiceReference.ScheduleDAO[]> ListSchedulesAsync() {
            return base.Channel.ListSchedulesAsync();
        }
        
        public RegistrationWeb.Domain.RegistrationServiceReference.PersonDAO[] ListPeople() {
            return base.Channel.ListPeople();
        }
        
        public System.Threading.Tasks.Task<RegistrationWeb.Domain.RegistrationServiceReference.PersonDAO[]> ListPeopleAsync() {
            return base.Channel.ListPeopleAsync();
        }
        
        public RegistrationWeb.Domain.RegistrationServiceReference.CourseScheduleDAO[] ListOpenCourses() {
            return base.Channel.ListOpenCourses();
        }
        
        public System.Threading.Tasks.Task<RegistrationWeb.Domain.RegistrationServiceReference.CourseScheduleDAO[]> ListOpenCoursesAsync() {
            return base.Channel.ListOpenCoursesAsync();
        }
        
        public RegistrationWeb.Domain.RegistrationServiceReference.CourseScheduleDAO[] ListFullCourses() {
            return base.Channel.ListFullCourses();
        }
        
        public System.Threading.Tasks.Task<RegistrationWeb.Domain.RegistrationServiceReference.CourseScheduleDAO[]> ListFullCoursesAsync() {
            return base.Channel.ListFullCoursesAsync();
        }
        
        public bool AddStudent(string name, int majorId) {
            return base.Channel.AddStudent(name, majorId);
        }
        
        public System.Threading.Tasks.Task<bool> AddStudentAsync(string name, int majorId) {
            return base.Channel.AddStudentAsync(name, majorId);
        }
        
        public bool RemoveStudent(int studentId) {
            return base.Channel.RemoveStudent(studentId);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveStudentAsync(int studentId) {
            return base.Channel.RemoveStudentAsync(studentId);
        }
        
        public RegistrationWeb.Domain.RegistrationServiceReference.CourseScheduleDAO[] ListCourseSchedule(int courseId) {
            return base.Channel.ListCourseSchedule(courseId);
        }
        
        public System.Threading.Tasks.Task<RegistrationWeb.Domain.RegistrationServiceReference.CourseScheduleDAO[]> ListCourseScheduleAsync(int courseId) {
            return base.Channel.ListCourseScheduleAsync(courseId);
        }
        
        public RegistrationWeb.Domain.RegistrationServiceReference.CourseScheduleDAO GetCourseSchedule(int courseScheduleId) {
            return base.Channel.GetCourseSchedule(courseScheduleId);
        }
        
        public System.Threading.Tasks.Task<RegistrationWeb.Domain.RegistrationServiceReference.CourseScheduleDAO> GetCourseScheduleAsync(int courseScheduleId) {
            return base.Channel.GetCourseScheduleAsync(courseScheduleId);
        }
        
        public RegistrationWeb.Domain.RegistrationServiceReference.ScheduleDAO GetSchedule(int scheduleId) {
            return base.Channel.GetSchedule(scheduleId);
        }
        
        public System.Threading.Tasks.Task<RegistrationWeb.Domain.RegistrationServiceReference.ScheduleDAO> GetScheduleAsync(int scheduleId) {
            return base.Channel.GetScheduleAsync(scheduleId);
        }
        
        public RegistrationWeb.Domain.RegistrationServiceReference.DepartmentDAO[] ListDepartments() {
            return base.Channel.ListDepartments();
        }
        
        public System.Threading.Tasks.Task<RegistrationWeb.Domain.RegistrationServiceReference.DepartmentDAO[]> ListDepartmentsAsync() {
            return base.Channel.ListDepartmentsAsync();
        }
    }
}
